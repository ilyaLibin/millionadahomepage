{"version":3,"sources":["components/Square.js","components/List.js","components/Matrix.js","components/HowItWorksModal.js","components/SocialLinks.js","components/PurchaseDialog.js","components/index.js","helpers/config.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Square","createSelectable","selectableRef","isSelected","isSelecting","image","boxClasses","classNames","className","ref","src","process","alt","memo","sold","r2c2","r2c3","r2c4","r2c5","r3c2","r3c3","r3c4","r3c5","List","props","items","map","item","i","raw","Math","ceil","column","coordinates","array","Array","from","keys","Matrix","duringSelection","onSelectionFinish","deselectOnEsc","selectboxClassName","clickClassName","enableDeselect","tolerance","globalMouse","allowClickWithoutSelected","onSelectionClear","onSelectedItemUnmount","ignoreList","HowItWorksModal","isOpen","onClose","size","width","onClick","Socials","href","target","_hover","textColor","_focus","boxShadow","as","RiTwitterFill","mr","RiDiscordLine","PurchaseDialog","components","SocialLinks","amount","adaPrice","toLocaleString","useGrouping","dialogClassnames","bg","w","p","borderRadius","d","alignItems","fontSize","color","fontWeight","letterSpacing","textTransform","ml","colorScheme","bgGradient","justifySelf","mt","lineHeight","isTruncated","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","useDisclosure","onOpen","useState","isCheckoutOpen","selectedItems","state","setState","handleSelection","length","useEffect","localStorage","getItem","pt","pb","style","margin","textAlign","textDecoration","pr","leftIcon","setItem","minH","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38e7a0cc.chunk.js","sourcesContent":["import { createSelectable } from 'react-selectable-fast'\nimport React, { memo } from 'react';\nimport classNames from 'classnames';\n\nconst Square = createSelectable(({ selectableRef, isSelected, isSelecting, image }) => {\n  const boxClasses = classNames({\n    'box-selected': isSelected,\n    'box-selecting': isSelecting,\n    'box': true\n  });\n\n  return !!image ?\n    <img className=\"user-img sold\" ref={selectableRef} src={process.env.PUBLIC_URL + '/img/' + image} alt=\"sold\" /> :\n    <div className={boxClasses} ref={selectableRef}></div>\n}\n);\n\nexport default memo(Square);\n","import Square from './Square';\n\nfunction coordinates(i) {\n  const raw = Math.ceil(i / 100);\n  const column = i % 100 + 1;\n  const rc = `r${raw}c${column}`;\n\n  return rc;\n}\n\nconst sold = {\n  r2c2: '8.jpg',\n  r2c3: '7.jpg',\n  r2c4: '6.jpg',\n  r2c5: '5.jpg',\n  r3c2: '4.jpg',\n  r3c3: '3.jpg',\n  r3c4: '2.jpg',\n  r3c5: '1.jpg',\n}\nconst List = (props) => {\n  const { items } = props;\n\n  return (\n    <div className=\"grid\">\n      {\n        items.map((item, i) => {\n          const image = sold[coordinates(i)];\n          return (<Square key={i} image={image} />)\n        })\n      }\n    </div>\n  )\n}\n\nexport default List;\n","import { SelectableGroup } from 'react-selectable-fast';\nimport List from './List';\n\nconst array = Array.from(Array(10000).keys());\n\nfunction Matrix({ duringSelection, onSelectionFinish }) {\n  return (\n    <SelectableGroup\n      deselectOnEsc={true}\n      selectboxClassName=\"selectBox\"\n      className=\"main\"\n      clickClassName=\"tick\"\n      enableDeselect={true}\n      tolerance={0}\n      globalMouse={true}\n      allowClickWithoutSelected={true}\n      duringSelection={duringSelection}\n      onSelectionClear={() => { }}\n      onSelectionFinish={onSelectionFinish}\n      onSelectedItemUnmount={() => {}}\n      ignoreList={['.not-selectable', '.sold', '.on-sale']}>\n      <List items={array} />\n    </SelectableGroup>\n  )\n}\n\nexport default Matrix;\n","import React from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from \"@chakra-ui/react\"\n\nconst HowItWorksModal = (props) => {\n  const {\n    isOpen = true,\n    onClose\n  } = props;\n\n  return (\n    <Modal onClose={onClose} size='xl' isOpen={isOpen}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader />\n        <ModalCloseButton />\n        <ModalBody>\n          <h1>Welcome to MillionADAHomepage!</h1>\n          <h2>Here you can buy virtual property with your ADA</h2>\n          <p>\n            There are only 1,000,000 pixels.<br />\n            1 Pixel = 1 ADA, offered in 10x10 squares.<br />\n            Your ownership secured with NFT on Cardano blockchain.<br />\n            <img src={process.env.PUBLIC_URL + '/img/Drag_select-1s.gif'} alt=\"drag select\" width=\"30%\" />\n          </p>\n\n          <h2>What can I do with my pixels?</h2>\n          <p>\n            <b>Your pixels - your rules!</b><br />\n            You can hold your pixels forever<br />\n            Flip it for a higher price! $$$$<br />\n            You can decorate your are with any visuals <br />\n            Link your website and write a caption <br />\n\n          </p>\n        </ModalBody>\n        <ModalFooter>\n          <Button onClick={onClose}>Start exploring!</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nexport default HowItWorksModal;\n","import { RiDiscordLine, RiTwitterFill } from 'react-icons/ri';\nimport { Icon, Link } from \"@chakra-ui/react\"\n\nfunction Socials() {\n  return (\n    <div className=\"socials\">\n      <Link href=\"https://twitter.com/MillionAdaHP\"\n        target=\"_blank\"\n        _hover={{ textColor: \"teal.600\" }}\n        _focus={{ boxShadow: \"outline\" }}>\n        <Icon as={RiTwitterFill} mr={2}/>\n      </Link>\n      <Link href=\"https://discord.gg/mqC96Wnf\"\n        target=\"_blank\"\n        _hover={{ textColor: \"teal.600\" }}\n        _focus={{ boxShadow: \"outline\" }}>\n        <Icon as={RiDiscordLine} mr={2} />\n      </Link>\n    </div>\n  )\n}\n\nexport default Socials;\n","import {\n  Box,\n  Text,\n  Button,\n  Center,\n  Kbd\n} from '@chakra-ui/react';\nimport classNames from 'classnames';\n\nfunction PurchaseDialog({amount}) {\n  const adaPrice = (amount * 100).toLocaleString('en', { useGrouping: true })\n\n  const dialogClassnames = classNames({\n    'purchase-dialog': true,\n    'not-active': amount === 0\n  })\n  return (\n    <div className={dialogClassnames}>\n      <Center bg=\"pink.100\" w=\"200\" p={2} borderRadius=\"xl\">\n        <Box p=\"2\">\n          <Box d=\"flex\" alignItems=\"baseline\">\n            <Box fontSize=\"2xl\">\n              <Text>{'₳' + adaPrice}</Text>\n            </Box>\n            <Box\n              as=\"button\"\n              color=\"gray.500\"\n              fontWeight=\"semibold\"\n              letterSpacing=\"wide\"\n              fontSize=\"xs\"\n              textTransform=\"uppercase\"\n              ml=\"2\"\n            >\n              <Button colorScheme=\"teal\"\n                bgGradient=\"linear(to-r, teal.500,green.500)\"\n                _hover={{\n                  bgGradient: \"linear(to-r, red.500, yellow.500)\",\n                }}\n                justifySelf=\"flex-end\">Purchase</Button>\n            </Box>\n          </Box>\n\n          <Box\n            mt=\"1\"\n            lineHeight=\"tight\"\n            isTruncated\n          >\n            or press <Kbd>Esc</Kbd> to deselect all\n          </Box>\n        </Box>\n      </Center>\n    </div>\n  )\n}\n\nexport default PurchaseDialog;\n","import List from './List'\nimport Matrix from './Matrix'\nimport HowItWorksModal from './HowItWorksModal'\nimport SocialLinks from './SocialLinks'\nimport Square from './Square'\nimport PurchaseDialog from './PurchaseDialog'\n\nconst components = {\n  List,\n  Matrix,\n  HowItWorksModal: HowItWorksModal,\n  SocialLinks,\n  Square,\n  PurchaseDialog,\n}\n\nexport default components;\n","import { extendTheme } from \"@chakra-ui/react\"\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\nexport default theme;\n","import { RiWallet3Line } from 'react-icons/ri';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Grid,\n  Flex,\n  Spacer,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport components from './components';\nimport theme from './helpers/config'\n\nconst {\n  HowItWorksModal, Matrix, SocialLinks, PurchaseDialog\n} = components;\n\nfunction App() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [ state, setState ] = useState({\n    isCheckoutOpen: false,\n    selectedItems: []\n  });\n\n  const handleHowItWorksClose = () => {\n    localStorage.setItem('pixellord-onboarding-seen', 'yes');\n    onClose()\n  }\n  \n  const handleSelection = (items) => {\n    setState({...state, selectedItems: items })\n    const amountOfSelectedItems = state.selectedItems.length;\n    if (amountOfSelectedItems > 0) {\n\n    }\n  }\n\n  useEffect(() => {\n    // handle onboarding flow - how it works modal\n    const isSeen = localStorage.getItem('pixellord-onboarding-seen');\n    if (!isSeen) { onOpen() }\n  });\n\n  useEffect(() => {\n\n  });\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex pt={5} pb={5} width={1000} style={{ margin: '0 auto'}}>\n        <h1>The Million ADA Homepage</h1>\n        <Spacer />\n        <Box p={2} fontSize=\"3xl\" textAlign=\"center\"><SocialLinks /></Box>\n        <Spacer />\n        <Box p=\"2\">\n          <Link\n            textDecoration=\"underline\"\n            href=\"#\"\n            onClick={onOpen}\n            fontSize=\"3xlg\"\n            fontWeight=\"bold\"\n            justifySelf=\"flex-start\"\n            pr={10}>\n            How it works\n          </Link>\n          <Button colorScheme=\"teal\"\n            bgGradient=\"linear(to-r, teal.500,green.500)\"\n            _hover={{\n              bgGradient: \"linear(to-r, red.500, yellow.500)\",\n            }}\n            leftIcon={<RiWallet3Line />}\n            justifySelf=\"flex-end\">Connect your wallet</Button>\n        </Box>\n      </Flex>\n\n      <HowItWorksModal isOpen={isOpen} onOpen={onOpen} onClose={handleHowItWorksClose} />\n\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <Matrix onSelectionFinish={handleSelection} duringSelection={handleSelection}/>\n\n          <VStack spacing={8}>\n            <Text fontSize=\"3xl\"></Text>\n          </VStack>\n        </Grid>\n      </Box>\n      <PurchaseDialog amount={state.selectedItems.length}/>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}